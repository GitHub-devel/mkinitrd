.\" Copyright (C) 2003 SuSE Linux AG
.\"$Id: mkinitrd.8,v 1.21 2006/11/07 16:38:33 bwalle Exp $
.TH mkinitrd 8
.SH NAME
mkinitrd \- create initrd disk image
.SH SYNOPSIS
\fBmkinitrd\fR [options] [root_dir]
.SH DESCRIPTION
\fBmkinitrd\fR creates initial ramdisk images for booting Linux.
The "/init" script in the compressed cpio archive loads all driver modules,
creates all device nodes currently known by the kernel, initializes
vital subsystems (e.g. networking when doing nfs), does a filesystem check
on the root filesystem and finally passes control to /sbin/init.
udev is used to create the device nodes in a tmpfs mounted /dev directory.
This directory is moved over to the final root filesystem, essentially hiding the 
on-disk content below /dev on the root filesystem.

A few options can be specified via the kernel command line to modify some hardcoded
values in the "/init" script. They are read from /proc/cmdline.

While in the old days the Linux kernel was responsible for mounting the rootfilesystem
and running /sbin/init, all the work is now done by the "/init" script.

.SH OPTIONS
.TP
\fB-h\fR
This Text.
.TP
\fB-k  "kernel list"\fR
list of kernel images for which initrd files are created (relative to
boot_dir), defaults to "vmlinux" on powerpc, "image" on s390 and "vmlinuz" for everything else.
.TP
\fB-i "initrd list"\fR 
list of file names (relativ to boot_dir) for the initrd; positions have to
match the "kernel list",  defaults to "initrd"
.TP
\fB-m "module list"\fR 
modules to include in initrd, defaults to INITRD_MODULES variable in
/etc/sysconfig/kernel 
.TP
\fB-f "feature list"\fR 
features to be enabled for the initrd. In general mkinitrd configures
the initrd for the root device it is started from. With this option
additional feature can be enabled.
.TP
\fB-b boot_dir\fR
boot dir, defaults to "/boot", where the initrd is created.
.TP
\fB-d root_device\fR
root device, defaults to the device from which the root_dir is mounted; 
overwrites the rootdev enviroment variable if set
.TP
\fB-s size\fR       
Add splash animation and bootscreen to initrd.
.TP
\fB-D interface\fR
Run dhcp on the specified interface.
.TP
\fB-I interface\fR
Configure the specified interface statically.
.TP
\fB-a acpi_dsdt\fR
Attach compiled ACPI DSDT (Differentiated System Description Table)
to initrd. This replaces the DSDT of the BIOS. Defaults to the ACPI_DSDT
variable in /etc/sysconfig/kernel.
.TP
\fB-t tmp_dir\fR 
tmp dir, defaults to "/tmp".
.TP
\fB-e\fR
Use static binaries where possible. (currently unavailable)
.TP
\fB-P\fR
Include modules for all IDE devices on the PCI bus.
.TP
\fB-V script\fR
Vendor specific script to run in linuxrc.
.TP
\fB-M map\fR
System.map file to use.
.TP
\fB-j device\fR
External journal device to use for the root filesystem.
.TP
\fB-l directory\fR
Directory to use for mkinitrd files instead of /lib/mkinitrd
.TP
\fB-A\fR
Create a so called "monster initrd" which includes all available features and modules.
.TP
\fBroot_dir\fR
the directory the root partition is mounted to defaults to "/"

.SH KERNEL COMMAND-LINE PARAMETER
\fBmkinitrd\fR implements a set of additional kernel command-line
parameters which are interpreted by the generated \fBinit\fR script.
In addition to the standard kernel parameters the following parameters
are supported:
.TP
\fBlinuxrc=trace\fR
Enabling command tracing of the init script
.TP
\fBnoresume\fR
Do not check for a resume device
.TP
\fBsysrq=yes\fR
\fBsysrq=1\fR
Enable sysrq
.TP
\fBresume=<device>\fR
Resume from device \fI<device>\fR
.TP
\fBjournal=<device>\fR
Use device \fI<device>\fR as external journal device.
This is only valid for reiser and xfs filesystems.
.TP
\fBmduuid=<UUID>\fR
Mount md RAID with uuid \fI<UUID\fR as the root filesystem.
.TP
\fBTargetAddress=<IP Address>\fR
[iSCSI] IP Address of the iSCSI Target
.TP
\fBInitiatorName=<iqn>\fR
[iSCSI] Use \fI<iqn>\fR as the iSCIS initiatorname.
.TP
\fBip=<ipspec>\fR
Use \fI<ipspec>\fR to configure the network interface. Format of the
\fI<ipspec>\fR is
<client>:<server>:<gateway>:<netmask>:<hostname>:<device>:<proto>.
<client>, <server>, <gateway>, <netmask> are in the standard
dotted-decimal IP notation. <proto> is currently ignored.
.TP
\fBudev_timeout=<secs>\fR
Set the timeout for root device detection to \fI<secs>\fR
seconds. Default is 10.

.SH FEATURES
Normally \fBmkinitrd\fR detects all required features automatically,
based upon the current root, resume, dump and journal device. 
If additional features should be enabled, the \fB-f\fR option can be specified.
Of course you can write your own features as well. Just take a look
at /lib/mkinitrd.

Currently, the following features can be selected (if a feature is
available depends on the installed packages):
.TP
\fBblock\fR
Include support for block devices (SCSI and IDE)
.TP
\fBbusybox\fR
Replace and add all tools known as safe with the busybox versions
.TP
\fBdasd\fR
Include support for dasd storage devices (s390)
.TP
\fBdmraid\fR
Include support for Software-Raid over device mapper (known as Fake-Raid)
.TP
\fBdm\fR
Include support for device mapper in general
.TP
\fBevms\fR
Add support for EVMS
.TP
\fBfirewire\fR
Include firewire storage
.TP
\fBiscsi\fR
Include iSCSI support
.TP
\fBkpartx\fR
Include support for kpartx partitioning. Always use this if you have
device mapper devices.
.TP
\fBluks\fR
Include encryption support using luks
.TP
\fBlvm2\fR
Include support for LVM2
.TP
\fBmd\fR
Include support for Software RAID (md)
.TP
\fBmultipath\fR
Include support for multipathing
.TP
\fBnetconsole\fR
Include support for debugging using netconsole
.TP
\fBnetwork\fR
Include networking support
.TP
\fBnfs\fR
Include support for nfs(-root)
.TP
\fBresume.kernel\fR
Include resume support using the kernel resume code
.TP
\fBresume.userspace\fR
Include resume support using the userspace program
.TP
\fBusb\fR
Include USB-support (keyboard and storage)
.TP
\fBvendor\fR
Include vendor script support
.TP
\fBzfcp\fR
Include support for zfcp storage devices (s390)

.SH Using NFS as root filesystem
To configure an initrd for an NFS client, specify these options to add nfs and network driver support into the initrd:
.TP
mkinitrd \fB-f nfs -D eth0\fR
This will add the required kernel modules and a dhcp client to the initrd, which will try to get an IP address via eth0.
Boot the NFS client with these additional command line options to mount the server: \fBnfsroot=1.2.3.4:/exported/directory\fR

.TP
mkinitrd \fB-f nfs -I eth0\fR
This will add the required kernel modules to the initrd, a static IP address must be specified on the kernel cmdline.
Boot the NFS client with the
.I nfsroot
parameter as specified above to mount the server and the additional
parameter
.B ip=1.2.3.42:1.2.3.4:1.2.3.1:255.255.255.0:hostname:eth0:none
to configure the network interface.
See the ip= description above for details about the ip= option.
.TP
mkinitrd 
Due to the new autodetection in mkinitrd it should suffice if the /-entry in /etc/fstab is an nfs target. The network device which will be used should have \fBSTARTMODE\fR set to \fBnfsroot\fR

.SH RECOVERY
What should you do if the initrd is broken and you want to fix it using a chroot?
I assume /mnt is your target root and /boot is mounted inside.

.RS 7
1. mount --bind /dev /mnt/dev
.RS 0
2. chroot /mnt
.RS 0
3. mount /proc
.RS 0
4. mount /sys
.RS 0
5. mkinitrd
.RS -7

.SH ENVIRONMENT VARIABLES
You can specify the root device via the environment variable rootdev (e.g.
"rootdev=/dev/hda mkinitrd").
.BR 
.SH AUTHOR
Steffen Winterfeldt <snwint@suse.de>, Susanne Oberhauser
<froh@suse.de>, Andreas Gruenbacher <agruen@suse.de>, Hannes Reinecke
<hare@suse.de>, Alexander Graf <agraf@suse.de>
.BR 
